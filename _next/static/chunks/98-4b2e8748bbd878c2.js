"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[98],{98:(e,t,r)=>{r.d(t,{JN:()=>S,K0:()=>c,KW:()=>v,LK:()=>x,Mu:()=>A,N5:()=>k,UJ:()=>h,Ui:()=>d,WP:()=>p,XG:()=>P,dC:()=>f,eG:()=>u,j9:()=>m,lE:()=>l,ms:()=>w,u9:()=>F});let a="images",o="metrics",i="stickers",s=()=>new Promise((e,t)=>{let r=indexedDB.open("ImageDatabase",4);r.onupgradeneeded=e=>{let t=e.target.result;t.objectStoreNames.contains(a)||t.createObjectStore(a,{keyPath:"id",autoIncrement:!0}),t.objectStoreNames.contains(o)||t.createObjectStore(o,{keyPath:"name"}),t.objectStoreNames.contains(i)||t.createObjectStore(i,{keyPath:"id"}),t.objectStoreNames.contains("gridSettings")||t.createObjectStore("gridSettings",{keyPath:"id"}),t.objectStoreNames.contains("collectedArtifacts")||t.createObjectStore("collectedArtifacts",{keyPath:"id"}),t.objectStoreNames.contains("visitedExhibits")||t.createObjectStore("visitedExhibits",{keyPath:"id"})},r.onsuccess=()=>e(r.result),r.onerror=()=>t(r.error)}),n=e=>{let t=atob(e.split(",")[1]),r=e.split(",")[0].split(":")[1].split(";")[0],a=new Uint8Array(t.length);for(let e=0;e<t.length;e++)a[e]=t.charCodeAt(e);return new Blob([a],{type:r})},c=async e=>{let t=(await s()).transaction(a,"readonly").objectStore(a).get(e);return new Promise((e,r)=>{t.onsuccess=()=>{let r=t.result;r&&r.image instanceof Blob?e(URL.createObjectURL(r.image)):e(null)},t.onerror=()=>r("Failed to load image by name")})},l=async(e,t,r)=>{let o=n(e),i=await s();return new Promise((e,s)=>{let n=i.transaction(a,"readwrite"),c=n.objectStore(a),l=()=>{let a=c.put({id:t,image:o,timestamp:Date.now()});a.onsuccess=async()=>{try{await y(t)&&await b(1),r&&await j(r),e()}catch(e){s("Image saved but failed to update collected artifacts or metrics")}},a.onerror=()=>{s("Failed to save image")}},d=c.get(t);d.onsuccess=()=>{if(d.result){let e=c.delete(t);e.onsuccess=()=>l(),e.onerror=()=>s("Failed to delete old image before saving new one")}else l()},d.onerror=()=>s("Failed to check for existing image"),n.oncomplete=()=>{e()},n.onerror=()=>{s("Transaction failed")}})},d=async()=>{let e=(await s()).transaction(a,"readonly").objectStore(a).getAll();return new Promise((t,r)=>{e.onsuccess=()=>{t(e.result.filter(e=>e&&e.image instanceof Blob).map(e=>({id:e.id,url:URL.createObjectURL(e.image)})))},e.onerror=()=>r("Failed to load images")})},u=async()=>{let e=(await s()).transaction(a,"readwrite");return e.objectStore(a).clear(),new Promise((t,r)=>{e.oncomplete=()=>t(),e.onerror=()=>r("Failed to clear images")})},m=async e=>{let t=(await s()).transaction(o,"readwrite"),r=t.objectStore(o),a={name:"stats",...e};return r.put(a),new Promise((e,r)=>{t.oncomplete=()=>e(),t.onerror=()=>r("Failed to save metrics")})},w=async()=>{let e=(await s()).transaction(o,"readonly").objectStore(o).get("stats");return new Promise((t,r)=>{e.onsuccess=()=>{t(e.result||null)},e.onerror=()=>{r("Failed to get metrics")}})},b=async function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,t=await w(),r={totalObjectsFound:((null==t?void 0:t.totalObjectsFound)||0)+e,totalExhibitsVisited:(null==t?void 0:t.totalExhibitsVisited)||0,startTime:(null==t?void 0:t.startTime)||Date.now(),stickerbookViewTime:(null==t?void 0:t.stickerbookViewTime)||0};await m(r)},g=async function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,t=await w(),r={totalObjectsFound:(null==t?void 0:t.totalObjectsFound)||0,totalExhibitsVisited:((null==t?void 0:t.totalExhibitsVisited)||0)+e,startTime:(null==t?void 0:t.startTime)||Date.now(),stickerbookViewTime:(null==t?void 0:t.stickerbookViewTime)||0};await m(r)},y=async e=>{let t=await s();return new Promise((r,a)=>{let o=t.transaction("collectedArtifacts","readwrite").objectStore("collectedArtifacts"),i=o.get(e);i.onsuccess=()=>{if(i.result)r(!1);else{let t=o.put({id:e,timestamp:Date.now()});t.onsuccess=()=>r(!0),t.onerror=()=>a("Failed to add collected artifact")}},i.onerror=()=>a("Failed to check collected artifact")})},j=async e=>{let t=await s();return new Promise((r,a)=>{let o=t.transaction("visitedExhibits","readwrite").objectStore("visitedExhibits"),i=o.get(e);i.onsuccess=async()=>{if(i.result)r();else{let t=o.put({id:e,timestamp:Date.now()});t.onsuccess=async()=>{try{await g(1),r()}catch(e){a("Failed to update total exhibits visited")}},t.onerror=()=>{a("Failed to add visited exhibit")}}},i.onerror=()=>a("Failed to check visited exhibit")})},S=async()=>{let e=(await s()).transaction("collectedArtifacts","readonly").objectStore("collectedArtifacts").getAll();return new Promise((t,r)=>{e.onsuccess=()=>{t((e.result||[]).map(e=>e.id))},e.onerror=()=>r("Failed to load collected artifacts")})},h=async()=>{let e=(await s()).transaction("collectedArtifacts","readwrite");return e.objectStore("collectedArtifacts").clear(),new Promise((t,r)=>{e.oncomplete=()=>t(),e.onerror=()=>r("Failed to clear collected artifacts")})},p=async()=>{let e=(await s()).transaction("visitedExhibits","readwrite");return e.objectStore("visitedExhibits").clear(),new Promise((t,r)=>{e.oncomplete=()=>t(),e.onerror=()=>r("Failed to clear visited exhibits")})},v=async()=>{let e=await s(),t=e.transaction("stickers","readonly").objectStore("stickers").getAll();return new Promise((r,a)=>{t.onsuccess=async()=>{let a=t.result;r(await Promise.all(a.map(async t=>{try{let r=e.transaction("images","readonly").objectStore("images").get(t.imageName);return new Promise(e=>{r.onsuccess=()=>{var a;let o=null===(a=r.result)||void 0===a?void 0:a.image,i=o instanceof Blob?URL.createObjectURL(o):"";e({...t,src:i})},r.onerror=()=>{e({...t,src:""})}})}catch(e){return{...t,src:""}}})))},t.onerror=()=>a("Failed to load stickers")})},k=async e=>{let t=(await s()).transaction("stickers","readwrite");return t.objectStore("stickers").put(e),new Promise((e,r)=>{t.oncomplete=()=>e(),t.onerror=()=>r("Failed to save sticker")})},f=async e=>{let t=(await s()).transaction(i,"readwrite");return t.objectStore(i).delete(e),new Promise((e,r)=>{t.oncomplete=()=>e(),t.onerror=()=>r("Failed to delete sticker")})},P=async e=>{let t=(await s()).transaction("gridSettings","readwrite");return t.objectStore("gridSettings").put({id:"gridBg",color:e}),new Promise((e,r)=>{t.oncomplete=()=>e(),t.onerror=()=>r("Failed to save grid background")})},F=async()=>{let e=(await s()).transaction("gridSettings","readonly").objectStore("gridSettings").get("gridBg");return new Promise((t,r)=>{e.onsuccess=()=>{var r,a;return t(null!==(a=null===(r=e.result)||void 0===r?void 0:r.color)&&void 0!==a?a:null)},e.onerror=()=>r("Failed to load grid background")})},x=async()=>{let e=(await s()).transaction("gridSettings","readwrite");return e.objectStore("gridSettings").clear(),new Promise((t,r)=>{e.oncomplete=()=>t(),e.onerror=()=>r("Failed to clear grid settings")})},A=async()=>{let e=(await s()).transaction(i,"readwrite");return e.objectStore(i).clear(),new Promise((t,r)=>{e.oncomplete=()=>t(),e.onerror=()=>r("Failed to clear stickers")})}}}]);